<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Library</name>
    </assembly>
    <members>
        <member name="T:Ucu.Poo.TelegramBot.AddressFinder">
            <summary>
            Un buscador de direcciones concreto que usa una API de localización.
            </summary>
        </member>
        <member name="M:Ucu.Poo.TelegramBot.AddressFinder.#ctor(Ucu.Poo.Locations.Client.LocationApiClient)">
            <summary>
            Inicializa una nueva instancia de AddressFinder.
            </summary>
            <param name="client">El cliente de la API de localización.</param>
        </member>
        <member name="M:Ucu.Poo.TelegramBot.AddressFinder.GetLocation(System.String)">
            <summary>
            Determina si existe una dirección.
            </summary>
            <param name="address">La dirección a buscar.</param>
            <returns>Una instancia de AddressResult con el resultado de la búsqueda, que incluye si la dirección se
            encontró o no, y si se encontró, la latitud y la longitud de la dirección.</returns>
        </member>
        <member name="T:Ucu.Poo.TelegramBot.AddressResult">
            <summary>
            Una implementación concreta del resutlado de buscar una dirección. Además de las propiedades definidas en
            IAddressResult esta clase agrega una propiedad Location para acceder a las coordenadas de la dirección buscada.
            </summary>
        </member>
        <member name="T:Ucu.Poo.TelegramBot.AddressHandler">
            <summary>
            Un "handler" del patrón Chain of Responsibility que implementa el comando "dirección".
            </summary>
        </member>
        <member name="P:Ucu.Poo.TelegramBot.AddressHandler.State">
            <summary>
            El estado del comando.
            </summary>
        </member>
        <member name="P:Ucu.Poo.TelegramBot.AddressHandler.Data">
            <summary>
            Los datos que va obteniendo el comando en los diferentes estados.
            </summary>
        </member>
        <member name="M:Ucu.Poo.TelegramBot.AddressHandler.#ctor(Ucu.Poo.TelegramBot.IAddressFinder,Ucu.Poo.TelegramBot.BaseHandler)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:Ucu.Poo.TelegramBot.AddressHandler"/>.
            </summary>
            <param name="next">Un buscador de direcciones.</param>
            <param name="next">El próximo "handler".</param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Ucu.Poo.TelegramBot.AddressHandler.CanHandle(Telegram.Bot.Types.Message)" -->
        <member name="M:Ucu.Poo.TelegramBot.AddressHandler.InternalHandle(Telegram.Bot.Types.Message,System.String@)">
            <summary>
            Procesa todos los mensajes y retorna true siempre.
            </summary>
            <param name="message">El mensaje a procesar.</param>
            <param name="response">La respuesta al mensaje procesado indicando que el mensaje no pudo se procesado.</param>
            <returns>true si el mensaje fue procesado; false en caso contrario.</returns>
        </member>
        <member name="M:Ucu.Poo.TelegramBot.AddressHandler.InternalCancel">
            <summary>
            Retorna este "handler" al estado inicial.
            </summary>
        </member>
        <member name="T:Ucu.Poo.TelegramBot.AddressHandler.AddressState">
            <summary>
            Indica los diferentes estados que puede tener el comando AddressHandler.
            - Start: El estado inicial del comando. En este estado el comando pide una dirección de origen y pasa al
            siguiente estado.
            - AddressPrompt: Luego de pedir la dirección. En este estado el comando obtiene las coordenadas de la
            dirección y vuelve al estado Start.
            </summary>
        </member>
        <member name="T:Ucu.Poo.TelegramBot.AddressHandler.AddressData">
            <summary>
            Representa los datos que va obteniendo el comando AddressHandler en los diferentes estados.
            </summary>
        </member>
        <member name="P:Ucu.Poo.TelegramBot.AddressHandler.AddressData.Address">
            <summary>
            La dirección que se ingresó en el estado AddressState.AddressPrompt.
            </summary>
        </member>
        <member name="P:Ucu.Poo.TelegramBot.AddressHandler.AddressData.Result">
            <summary>
            El resultado de la búsqueda de la dirección ingresada.
            </summary>
        </member>
        <member name="T:Ucu.Poo.TelegramBot.AugusHandler">
            <summary>
            Un "handler" del patrón Chain of Responsibility que implementa el comando "foto".
            </summary>
        </member>
        <member name="M:Ucu.Poo.TelegramBot.AugusHandler.#ctor(Ucu.Poo.TelegramBot.BaseHandler)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="!:PhotoHandler"/>. Esta clase procesa el mensaje "foto".
            </summary>
            <param name="next">El próximo "handler".</param>
            <param name="bot">El bot para enviar la foto.</param>
        </member>
        <member name="M:Ucu.Poo.TelegramBot.AugusHandler.InternalHandle(Telegram.Bot.Types.Message,System.String@)">
            <summary>
            Procesa el mensaje "foto" y retorna true; retorna false en caso contrario.
            </summary>
            <param name="message">El mensaje a procesar.</param>
            <param name="response">La respuesta al mensaje procesado.</param>
            <returns>true si el mensaje fue procesado; false en caso contrario.</returns>
        </member>
        <member name="T:Ucu.Poo.TelegramBot.BascouHandler">
            <summary>
            Un "handler" del patrón Chain of Responsibility que implementa el comando "chau".
            </summary>
        </member>
        <member name="M:Ucu.Poo.TelegramBot.BascouHandler.#ctor(Ucu.Poo.TelegramBot.BaseHandler)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="!:GoodByeHandler"/>. Esta clase procesa el mensaje "chau"
            y el mensaje "adiós" -un ejemplo de cómo un "handler" puede procesar comandos con sinónimos.
            </summary>
            <param name="next">El próximo "handler".</param>
        </member>
        <member name="M:Ucu.Poo.TelegramBot.BascouHandler.InternalHandle(Telegram.Bot.Types.Message,System.String@)">
            <summary>
            Procesa el mensaje "chau" y retorna true; retorna false en caso contrario.
            </summary>
            <param name="message">El mensaje a procesar.</param>
            <param name="response">La respuesta al mensaje procesado.</param>
            <returns>true si el mensaje fue procesado; false en caso contrario.</returns>
        </member>
        <member name="T:Ucu.Poo.TelegramBot.BaseHandler">
            <summary>
            Clase base para implementar el patrón Chain of Responsibility. En ese patrón se pasa un mensaje a través de una
            cadena de "handlers" que pueden procesar o no el mensaje. Cada "handler" decide si procesa el mensaje, o si se lo
            pasa al siguiente. Esta clase base implmementa la responsabilidad de recibir el mensaje y pasarlo al siguiente
            "handler" en caso que el mensaje no sea procesado. La responsabilidad de decidir si el mensaje se procesa o no, y
            de procesarlo, se delega a las clases sucesoras de esta clase base.
            </summary>
        </member>
        <member name="P:Ucu.Poo.TelegramBot.BaseHandler.Next">
            <summary>
            Obtiene el próximo "handler".
            </summary>
            <value>El "handler" que será invocado si este "handler" no procesa el mensaje.</value>
        </member>
        <member name="P:Ucu.Poo.TelegramBot.BaseHandler.Keywords">
            <summary>
            Obtiene o asigna el conjunto de palabras clave que este "handler" puede procesar.
            </summary>
            <value>Un array de palabras clave.</value>
        </member>
        <member name="M:Ucu.Poo.TelegramBot.BaseHandler.#ctor(Ucu.Poo.TelegramBot.IHandler)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:Ucu.Poo.TelegramBot.BaseHandler"/>.
            </summary>
            <param name="next">El próximo "handler".</param>
        </member>
        <member name="M:Ucu.Poo.TelegramBot.BaseHandler.#ctor(System.String[],Ucu.Poo.TelegramBot.BaseHandler)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:Ucu.Poo.TelegramBot.BaseHandler"/> con una lista de comandos.
            </summary>
            <param name="keywords">La lista de comandos.</param>
            <param name="next">El próximo "handler".</param>
        </member>
        <member name="M:Ucu.Poo.TelegramBot.BaseHandler.InternalHandle(Telegram.Bot.Types.Message,System.String@)">
            <summary>
            Este método debe ser sobreescrito por las clases sucesores. La clase sucesora procesa el mensaje y asigna
            la respuesta al mensaje.
            </summary>
            <param name="message">El mensaje a procesar.</param>
            <param name="response">La respuesta al mensaje procesado.</param>
        </member>
        <member name="M:Ucu.Poo.TelegramBot.BaseHandler.InternalCancel">
            <summary>
            Este método puede ser sobreescrito en las clases sucesores que procesan varios mensajes cambiando de estado
            entre mensajes deben sobreescribir este método para volver al estado inicial. En la clase base no hace nada.
            </summary>
        </member>
        <member name="M:Ucu.Poo.TelegramBot.BaseHandler.CanHandle(Telegram.Bot.Types.Message)">
            <summary>
            Determina si este "handler" puede procesar el mensaje. En la clase base se utiliza el array
            <see cref="P:Ucu.Poo.TelegramBot.BaseHandler.Keywords"/> para buscar el texto en el mensaje ignorando mayúsculas y minúsculas. Las
            clases sucesores pueden sobreescribir este método para proveer otro mecanismo para determina si procesan o no
            un mensaje.
            </summary>
            <param name="message">El mensaje a procesar.</param>
            <returns>true si el mensaje puede ser pocesado; false en caso contrario.</returns>
        </member>
        <member name="M:Ucu.Poo.TelegramBot.BaseHandler.Handle(Telegram.Bot.Types.Message,System.String@)">
            <summary>
            Procesa el mensaje o lo pasa al siguiente "handler" si existe.
            </summary>
            <param name="message">El mensaje a procesar.</param>
            <param name="response">La respuesta al mensaje procesado.</param>
            <returns>El "handler" que procesó el mensaje si el mensaje fue procesado; null en caso contrario.</returns>
        </member>
        <member name="M:Ucu.Poo.TelegramBot.BaseHandler.Cancel">
            <summary>
            Retorna este "handler" al estado inicial. En los "handler" sin estado no hace nada. Los "handlers" que
            procesan varios mensajes cambiando de estado entre mensajes deben sobreescribir este método para volver al
            estado inicial.
            </summary>
        </member>
        <member name="T:Ucu.Poo.TelegramBot.ChauHandler">
            <summary>
            Un "handler" del patrón Chain of Responsibility que implementa el comando "chau".
            </summary>
        </member>
        <member name="M:Ucu.Poo.TelegramBot.ChauHandler.#ctor(Ucu.Poo.TelegramBot.BaseHandler)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="!:GoodByeHandler"/>. Esta clase procesa el mensaje "chau"
            y el mensaje "adiós" -un ejemplo de cómo un "handler" puede procesar comandos con sinónimos.
            </summary>
            <param name="next">El próximo "handler".</param>
        </member>
        <member name="M:Ucu.Poo.TelegramBot.ChauHandler.InternalHandle(Telegram.Bot.Types.Message,System.String@)">
            <summary>
            Procesa el mensaje "chau" y retorna true; retorna false en caso contrario.
            </summary>
            <param name="message">El mensaje a procesar.</param>
            <param name="response">La respuesta al mensaje procesado.</param>
            <returns>true si el mensaje fue procesado; false en caso contrario.</returns>
        </member>
        <member name="T:Ucu.Poo.TelegramBot.DiaHandler">
            <summary>
            Un "handler" del patrón Chain of Responsibility que implementa el comando "hola".
            </summary>
        </member>
        <member name="M:Ucu.Poo.TelegramBot.DiaHandler.#ctor(Ucu.Poo.TelegramBot.BaseHandler)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:Ucu.Poo.TelegramBot.HelloHandler"/>. Esta clase procesa el mensaje "hola".
            </summary>
            <param name="next">El próximo "handler".</param>
        </member>
        <member name="M:Ucu.Poo.TelegramBot.DiaHandler.InternalHandle(Telegram.Bot.Types.Message,System.String@)">
            <summary>
            Procesa el mensaje "hola" y retorna true; retorna false en caso contrario.
            </summary>
            <param name="message">El mensaje a procesar.</param>
            <param name="response">La respuesta al mensaje procesado.</param>
            <returns>true si el mensaje fue procesado; false en caso contrario.</returns>
        </member>
        <member name="T:Ucu.Poo.TelegramBot.DistanceCalculator">
            <summary>
            Un calculador de distancias concreto que utiliza una API de localización para calcular la distancia entre dos
            direcciones.
            </summary>
        </member>
        <member name="T:Ucu.Poo.TelegramBot.DistanceResult">
            <summary>
            Una implementación concreta del resutlado de calcular distancias. Además de las propiedades definidas en
            IDistanceResult esta clase agrega propiedades para acceder a las coordenadas de las direcciones buscadas.
            </summary>
        </member>
        <member name="M:Ucu.Poo.TelegramBot.DistanceResult.#ctor(Ucu.Poo.Locations.Client.Location,Ucu.Poo.Locations.Client.Location,System.Double,System.Double)">
            <summary>
            Inicializa una nueva instancia de DistanceResult a partir de dos coordenadas, la distancia y el tiempo
            entre ellas.
            </summary>
            <param name="from">Las coordenadas de origen.</param>
            <param name="to">Las coordenadas de destino.</param>
            <param name="distance">La distancia entre las coordenadas.</param>
            <param name="time">El tiempo que se demora en llegar del origen al destino.</param>
        </member>
        <member name="T:Ucu.Poo.TelegramBot.DistanceHandler">
            <summary>
            Un "handler" del patrón Chain of Responsibility que implementa el comando "distancia".
            </summary>
        </member>
        <member name="P:Ucu.Poo.TelegramBot.DistanceHandler.State">
            <summary>
            El estado del comando.
            </summary>
        </member>
        <member name="P:Ucu.Poo.TelegramBot.DistanceHandler.Data">
            <summary>
            Los datos que va obteniendo el comando en los diferentes estados.
            </summary>
        </member>
        <member name="M:Ucu.Poo.TelegramBot.DistanceHandler.#ctor(Ucu.Poo.TelegramBot.IDistanceCalculator,Ucu.Poo.TelegramBot.DistanceHandler)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:Ucu.Poo.TelegramBot.DistanceHandler"/>.
            </summary>
            <param name="calculator">Un calculador de distancias.</param>
            <param name="next">El próximo "handler".</param>
        </member>
        <member name="M:Ucu.Poo.TelegramBot.DistanceHandler.CanHandle(Telegram.Bot.Types.Message)">
            <summary>
            Determina si este "handler" puede procesar el mensaje. En el primer mensaje cuando
            <see cref="P:Ucu.Poo.TelegramBot.DistanceHandler.State"/> es <see cref="F:Ucu.Poo.TelegramBot.DistanceHandler.DistanceState.Start"/> usa
            <see cref="P:Ucu.Poo.TelegramBot.BaseHandler.Keywords"/> para buscar el texto en el mensaje ignorando mayúsculas y minúsculas. En
            caso contrario eso implica que los sucesivos mensajes son parámetros del comando y se procesan siempre.
            </summary>
            <param name="message">El mensaje a procesar.</param>
            <returns>true si el mensaje puede ser pocesado; false en caso contrario.</returns>
        </member>
        <member name="M:Ucu.Poo.TelegramBot.DistanceHandler.InternalHandle(Telegram.Bot.Types.Message,System.String@)">
            <summary>
            Procesa todos los mensajes y retorna true siempre.
            </summary>
            <param name="message">El mensaje a procesar.</param>
            <param name="response">La respuesta al mensaje procesado indicando que el mensaje no pudo se procesado.</param>
            <returns>true si el mensaje fue procesado; false en caso contrario.</returns>
        </member>
        <member name="M:Ucu.Poo.TelegramBot.DistanceHandler.InternalCancel">
            <summary>
            Retorna este "handler" al estado inicial.
            </summary>
        </member>
        <member name="T:Ucu.Poo.TelegramBot.DistanceHandler.DistanceState">
            <summary>
            Indica los diferentes estados que puede tener el comando DistanceHandler.
            - Start: El estado inicial del comando. En este estado el comando pide la dirección de origen y pasa al
            siguiente estado.
            - FromAddressPrompt: Luego de pedir la dirección de origen. En este estado el comando pide la dirección de
            destino y pasa al siguiente estado.
            - ToAddressPrompt: Luego de pedir la dirección de destino. En este estado el comando calcula la distancia
            y vuelve al estado Start.
            </summary>
        </member>
        <member name="T:Ucu.Poo.TelegramBot.DistanceHandler.DistanceData">
            <summary>
            Representa los datos que va obteniendo el comando DistanceHandler en los diferentes estados.
            </summary>
        </member>
        <member name="P:Ucu.Poo.TelegramBot.DistanceHandler.DistanceData.FromAddress">
            <summary>
            La dirección que se ingresó en el estado DistanceState.FromAddressPrompt.
            </summary>
        </member>
        <member name="P:Ucu.Poo.TelegramBot.DistanceHandler.DistanceData.ToAddress">
            <summary>
            La dirección que se ingresó en el estado DistanceState.ToAddressPrompt.
            </summary>
        </member>
        <member name="P:Ucu.Poo.TelegramBot.DistanceHandler.DistanceData.Result">
            <summary>
            El resultado del cálculo de la distancia entre las direcciones ingresadas.
            </summary>
        </member>
        <member name="T:Ucu.Poo.TelegramBot.DuarteHandler">
            <summary>
            Un "handler" del patrón Chain of Responsibility que implementa el comando "foto".
            </summary>
        </member>
        <member name="M:Ucu.Poo.TelegramBot.DuarteHandler.#ctor(Telegram.Bot.TelegramBotClient,Ucu.Poo.TelegramBot.BaseHandler)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="!:PhotoHandler"/>. Esta clase procesa el mensaje "foto".
            </summary>
            <param name="next">El próximo "handler".</param>
            <param name="bot">El bot para enviar la foto.</param>
        </member>
        <member name="M:Ucu.Poo.TelegramBot.DuarteHandler.InternalHandle(Telegram.Bot.Types.Message,System.String@)">
            <summary>
            Procesa el mensaje "foto" y retorna true; retorna false en caso contrario.
            </summary>
            <param name="message">El mensaje a procesar.</param>
            <param name="response">La respuesta al mensaje procesado.</param>
            <returns>true si el mensaje fue procesado; false en caso contrario.</returns>
        </member>
        <member name="M:Ucu.Poo.TelegramBot.DuarteHandler.SendProfileImage(Telegram.Bot.Types.Message)">
            <summary>
            Envía una imagen como respuesta al mensaje recibido. Como ejemplo enviamos siempre la misma foto.
            </summary>
        </member>
        <member name="T:Ucu.Poo.TelegramBot.FlouHandler">
            <summary>
            Un "handler" del patrón Chain of Responsibility que implementa el comando "chau".
            </summary>
        </member>
        <member name="M:Ucu.Poo.TelegramBot.FlouHandler.#ctor(Ucu.Poo.TelegramBot.BaseHandler)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="!:GoodByeHandler"/>. Esta clase procesa el mensaje "chau"
            y el mensaje "adiós" -un ejemplo de cómo un "handler" puede procesar comandos con sinónimos.
            </summary>
            <param name="next">El próximo "handler".</param>
        </member>
        <member name="M:Ucu.Poo.TelegramBot.FlouHandler.InternalHandle(Telegram.Bot.Types.Message,System.String@)">
            <summary>
            Procesa el mensaje "chau" y retorna true; retorna false en caso contrario.
            </summary>
            <param name="message">El mensaje a procesar.</param>
            <param name="response">La respuesta al mensaje procesado.</param>
            <returns>true si el mensaje fue procesado; false en caso contrario.</returns>
        </member>
        <member name="T:Ucu.Poo.TelegramBot.GermiHandler">
            <summary>
            Un "handler" del patrón Chain of Responsibility que implementa el comando "chau".
            </summary>
        </member>
        <member name="T:Ucu.Poo.TelegramBot.GeroHandler">
            <summary>
            Un "handler" del patrón Chain of Responsibility que implementa el comando "chau".
            </summary>
        </member>
        <member name="M:Ucu.Poo.TelegramBot.GeroHandler.#ctor(Ucu.Poo.TelegramBot.BaseHandler)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="!:GoodByeHandler"/>. Esta clase procesa el mensaje "chau"
            y el mensaje "adiós" -un ejemplo de cómo un "handler" puede procesar comandos con sinónimos.
            </summary>
            <param name="next">El próximo "handler".</param>
        </member>
        <member name="M:Ucu.Poo.TelegramBot.GeroHandler.InternalHandle(Telegram.Bot.Types.Message,System.String@)">
            <summary>
            Procesa el mensaje "chau" y retorna true; retorna false en caso contrario.
            </summary>
            <param name="message">El mensaje a procesar.</param>
            <param name="response">La respuesta al mensaje procesado.</param>
            <returns>true si el mensaje fue procesado; false en caso contrario.</returns>
        </member>
        <member name="T:Ucu.Poo.TelegramBot.GestiHandler">
            <summary>
            Un "handler" del patrón Chain of Responsibility que implementa el comando "chau".
            </summary>
        </member>
        <member name="M:Ucu.Poo.TelegramBot.GestiHandler.#ctor(Ucu.Poo.TelegramBot.BaseHandler)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="!:GoodByeHandler"/>. Esta clase procesa el mensaje "chau"
            y el mensaje "adiós" -un ejemplo de cómo un "handler" puede procesar comandos con sinónimos.
            </summary>
            <param name="next">El próximo "handler".</param>
        </member>
        <member name="M:Ucu.Poo.TelegramBot.GestiHandler.InternalHandle(Telegram.Bot.Types.Message,System.String@)">
            <summary>
            Procesa el mensaje "chau" y retorna true; retorna false en caso contrario.
            </summary>
            <param name="message">El mensaje a procesar.</param>
            <param name="response">La respuesta al mensaje procesado.</param>
            <returns>true si el mensaje fue procesado; false en caso contrario.</returns>
        </member>
        <member name="T:Ucu.Poo.TelegramBot.HelloHandler">
            <summary>
            Un "handler" del patrón Chain of Responsibility que implementa el comando "hola".
            </summary>
        </member>
        <member name="P:Ucu.Poo.TelegramBot.HelloHandler.State">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:Ucu.Poo.TelegramBot.HelloHandler"/>. Esta clase procesa el mensaje "hola".
            </summary>
            <param name="next">El próximo "handler".</param>
        </member>
        <member name="M:Ucu.Poo.TelegramBot.HelloHandler.InternalHandle(Telegram.Bot.Types.Message,System.String@)">
            <summary>
            Procesa el mensaje "hola" y retorna true; retorna false en caso contrario.
            </summary>
            <param name="message">El mensaje a procesar.</param>
            <param name="response">La respuesta al mensaje procesado.</param>
            <returns>true si el mensaje fue procesado; false en caso contrario.</returns>
        </member>
        <member name="T:Ucu.Poo.TelegramBot.IAddressFinder">
            <summary>
            Una interfaz define una abstracción para un buscador de direcciones genérico.
            </summary>
            <remarks>
            Esta interfaz fue creada siguiendo el principio de inversión de dependencias para evitar que los comandos
            concretos dependan de buscadores de direcciones concretos; en su lugar los comandos concretos dependen de esta
            abstracción.
            Entre otras cosas est permite cambiar el buscador de direcciones en tiempo de ejecución, para utilizar uno en
            los casos de prueba que retorna resultados conocidos para direcciones conocidas, y otro en la versión final para
            buscar usando una API de localizaciones.
            </remarks>
        </member>
        <member name="M:Ucu.Poo.TelegramBot.IAddressFinder.GetLocation(System.String)">
            <summary>
            Determina si existe una dirección.
            </summary>
            <param name="address">La dirección a buscar.</param>
            <returns>Un objeto de una clase que implemente la interfaz IAddressResult con el resultado de la búsqueda, que
            incluye si la dirección se encontró o no, y si se encontró, la latitud y la longitud de la dirección.</returns>
        </member>
        <member name="P:Ucu.Poo.TelegramBot.IAddressResult.Found">
            <summary>
            Indica si se encontró o no la dirección. En ese caso son válidos los demás valores. En caso contrario los
            demás valores son indeterminados.
            </summary>
            <value>true si se encontró la dirección; false en caso contrario.</value>
        </member>
        <member name="P:Ucu.Poo.TelegramBot.IAddressResult.Latitude">
            <summary>
            La latitud de la dirección.
            </summary>
            <value>El valor de la latitud en formato decimal.</value>
        </member>
        <member name="P:Ucu.Poo.TelegramBot.IAddressResult.Longitude">
            <summary>
            La longitud de la dirección.
            </summary>
            <value>El valor de la longitud en formato decimal.</value>
        </member>
        <member name="T:Ucu.Poo.TelegramBot.IDistanceCalculator">
            <summary>
            Una interfaz que define una abstracción para un calculador de distancias genérico.
            </summary>
            <remarks>
            Esta interfaz fue creada siguiendo el principio de inversión de dependencias para evitar que los comandos
            concretos dependan de calculadores de distancias concretos; en su lugar los comandos concretos dependen de esta
            abstracción.
            Entre otras cosas est permite cambiar el calculador de distancias en tiempo de ejecución, para utilizar uno en
            los casos de prueba que retorna resultados conocidos para direcciones conocidas, y otro en la versión final para
            buscar usando una API de localizaciones.
            </remarks>
        </member>
        <member name="M:Ucu.Poo.TelegramBot.IDistanceCalculator.CalculateDistance(System.String,System.String)">
            <summary>
            Determina si existe una dirección.
            </summary>
            <param name="address">La dirección a buscar.</param>
            <returns>true si la dirección existe; false en caso contrario.</returns>
        </member>
        <member name="T:Ucu.Poo.TelegramBot.IDistanceResult">
            <summary>
            Una interfaz que define una abstracción para el resultado de calcular distancias.
            </summary>
        </member>
        <member name="P:Ucu.Poo.TelegramBot.IDistanceResult.FromExists">
            <summary>
            Obtiene un valor que indica si la dirección de origen para el cálculo de distancias existe; sólo se puede
            calcular la distancia entre direcciones que existen.
            </summary>
        </member>
        <member name="P:Ucu.Poo.TelegramBot.IDistanceResult.ToExists">
            <summary>
            Obtiene un valor que indica si la dirección de destino para el cálculo de distancias existe; sólo se puede
            calcular la distancia entre direcciones que existen.
            </summary>
        </member>
        <member name="P:Ucu.Poo.TelegramBot.IDistanceResult.Distance">
            <summary>
            La distancia calculada.
            </summary>
        </member>
        <member name="P:Ucu.Poo.TelegramBot.IDistanceResult.Time">
            <summary>
            El tiempo en llegar del origen al destino.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Ucu.Poo.TelegramBot.IHandler" -->
        <member name="P:Ucu.Poo.TelegramBot.IHandler.Next">
            <summary>
            Obtiene el próximo "handler".
            </summary>
            <value>El "handler" que será invocado si este "handler" no procesa el mensaje.</value>
        </member>
        <member name="M:Ucu.Poo.TelegramBot.IHandler.Handle(Telegram.Bot.Types.Message,System.String@)">
            <summary>
            Procesa el mensaje o la pasa al siguiente "handler" si existe.
            </summary>
            <param name="message">El mensaje a procesar.</param>
            <param name="response">La respuesta al mensaje procesado.</param>
            <returns>El "handler" que procesó el mensaje si el mensaje fue procesado; null en caso contrario.</returns>
        </member>
        <member name="M:Ucu.Poo.TelegramBot.IHandler.Cancel">
            <summary>
            Retorna este "handler" al estado inicial y cancela el próximo "handler" si existe. Es utilizado para que los
            "handlers" que procesan varios mensajes cambiando de estado entre mensajes puedan volver al estado inicial en
            caso de error por ejemplo.
            </summary>
        </member>
        <member name="T:Ucu.Poo.TelegramBot.JeroHandler">
            <summary>
            Un "handler" del patrón Chain of Responsibility que implementa el comando "chau".
            </summary>
        </member>
        <member name="M:Ucu.Poo.TelegramBot.JeroHandler.#ctor(Ucu.Poo.TelegramBot.BaseHandler)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="!:GoodByeHandler"/>. Esta clase procesa el mensaje "chau"
            y el mensaje "adiós" -un ejemplo de cómo un "handler" puede procesar comandos con sinónimos.
            </summary>
            <param name="next">El próximo "handler".</param>
        </member>
        <member name="M:Ucu.Poo.TelegramBot.JeroHandler.InternalHandle(Telegram.Bot.Types.Message,System.String@)">
            <summary>
            Procesa el mensaje "chau" y retorna true; retorna false en caso contrario.
            </summary>
            <param name="message">El mensaje a procesar.</param>
            <param name="response">La respuesta al mensaje procesado.</param>
            <returns>true si el mensaje fue procesado; false en caso contrario.</returns>
        </member>
        <member name="T:Ucu.Poo.TelegramBot.LeitoHandler">
            <summary>
            Un "handler" del patrón Chain of Responsibility que implementa el comando "chau".
            </summary>
        </member>
        <member name="M:Ucu.Poo.TelegramBot.LeitoHandler.#ctor(Ucu.Poo.TelegramBot.BaseHandler)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="!:GoodByeHandler"/>. Esta clase procesa el mensaje "chau"
            y el mensaje "adiós" -un ejemplo de cómo un "handler" puede procesar comandos con sinónimos.
            </summary>
            <param name="next">El próximo "handler".</param>
        </member>
        <member name="M:Ucu.Poo.TelegramBot.LeitoHandler.InternalHandle(Telegram.Bot.Types.Message,System.String@)">
            <summary>
            Procesa el mensaje "chau" y retorna true; retorna false en caso contrario.
            </summary>
            <param name="message">El mensaje a procesar.</param>
            <param name="response">La respuesta al mensaje procesado.</param>
            <returns>true si el mensaje fue procesado; false en caso contrario.</returns>
        </member>
        <member name="T:Ucu.Poo.TelegramBot.MaoriHandler">
            <summary>
            Un "handler" del patrón Chain of Responsibility que implementa el comando "chau".
            </summary>
        </member>
        <member name="M:Ucu.Poo.TelegramBot.MaoriHandler.#ctor(Ucu.Poo.TelegramBot.BaseHandler)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="!:GoodByeHandler"/>. Esta clase procesa el mensaje "chau"
            y el mensaje "adiós" -un ejemplo de cómo un "handler" puede procesar comandos con sinónimos.
            </summary>
            <param name="next">El próximo "handler".</param>
        </member>
        <member name="M:Ucu.Poo.TelegramBot.MaoriHandler.InternalHandle(Telegram.Bot.Types.Message,System.String@)">
            <summary>
            Procesa el mensaje "chau" y retorna true; retorna false en caso contrario.
            </summary>
            <param name="message">El mensaje a procesar.</param>
            <param name="response">La respuesta al mensaje procesado.</param>
            <returns>true si el mensaje fue procesado; false en caso contrario.</returns>
        </member>
        <member name="T:Ucu.Poo.TelegramBot.MarcoHandler">
            <summary>
            Un "handler" del patrón Chain of Responsibility que implementa el comando "chau".
            </summary>
        </member>
        <member name="M:Ucu.Poo.TelegramBot.MarcoHandler.#ctor(Ucu.Poo.TelegramBot.BaseHandler)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="!:GoodByeHandler"/>. Esta clase procesa el mensaje "chau"
            y el mensaje "adiós" -un ejemplo de cómo un "handler" puede procesar comandos con sinónimos.
            </summary>
            <param name="next">El próximo "handler".</param>
        </member>
        <member name="M:Ucu.Poo.TelegramBot.MarcoHandler.InternalHandle(Telegram.Bot.Types.Message,System.String@)">
            <summary>
            Procesa el mensaje "chau" y retorna true; retorna false en caso contrario.
            </summary>
            <param name="message">El mensaje a procesar.</param>
            <param name="response">La respuesta al mensaje procesado.</param>
            <returns>true si el mensaje fue procesado; false en caso contrario.</returns>
        </member>
        <member name="T:Ucu.Poo.TelegramBot.NahuelHandler">
            <summary>
            Un "handler" del patrón Chain of Responsibility que implementa el comando "chau".
            </summary>
        </member>
        <member name="M:Ucu.Poo.TelegramBot.NahuelHandler.#ctor(Ucu.Poo.TelegramBot.BaseHandler)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="!:GoodByeHandler"/>. Esta clase procesa el mensaje "chau"
            y el mensaje "adiós" -un ejemplo de cómo un "handler" puede procesar comandos con sinónimos.
            </summary>
            <param name="next">El próximo "handler".</param>
        </member>
        <member name="M:Ucu.Poo.TelegramBot.NahuelHandler.InternalHandle(Telegram.Bot.Types.Message,System.String@)">
            <summary>
            Procesa el mensaje "chau" y retorna true; retorna false en caso contrario.
            </summary>
            <param name="message">El mensaje a procesar.</param>
            <param name="response">La respuesta al mensaje procesado.</param>
            <returns>true si el mensaje fue procesado; false en caso contrario.</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Ucu.Poo.TelegramBot.OpinionHandler.OpiState" -->
        <member name="T:Ucu.Poo.TelegramBot.SantiHandler">
            <summary>
            Un "handler" del patrón Chain of Responsibility que implementa el comando "dirección".
            </summary>
        </member>
        <member name="M:Ucu.Poo.TelegramBot.SantiHandler.#ctor(Telegram.Bot.TelegramBotClient,Ucu.Poo.TelegramBot.BaseHandler)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:Ucu.Poo.TelegramBot.AddressHandler"/>.
            </summary>
            <param name="next">Un buscador de direcciones.</param>
            <param name="next">El próximo "handler".</param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Ucu.Poo.TelegramBot.SantiHandler.InternalHandle(Telegram.Bot.Types.Message,System.String@)" -->
        <member name="M:Ucu.Poo.TelegramBot.SantiHandler.SendProfileImageSanti(Telegram.Bot.Types.Message)">
            <summary>
            Retorna este "handler" al estado inicial.
            </summary>
        </member>
    </members>
</doc>
