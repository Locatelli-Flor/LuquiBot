<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Library</name>
    </assembly>
    <members>
        <member name="T:Chatbot.Administrador">
            <summary>
            Clase Administrador.
            Principios y/o Patrones utilizados para implementar la clase:
            Creator: Es la única clase que tiene la responsabilidad de crear y borrar categorías.
            SRP: La única responsabilidad de la clase es administrar las categorías y servicios. Además.
            ISP: Los tipos que implementa la clase los utiliza. Por ejemplo: IUsuario y los Atributos Nombre y Email que se usan para crear una instancia de Administrador.
            </summary>
        </member>
        <member name="M:Chatbot.Administrador.#ctor(System.String,System.String)">
            <summary>
            El constructor de la clase.
            </summary>
        </member>
        <member name="M:Chatbot.Administrador.AgregarCategoria(Chatbot.Categoria)">
            <summary>
            Método AgregarCategoría. Crea una categoría y la añade a la lista de categorías.
            </summary>
        </member>
        <member name="M:Chatbot.Administrador.QuitarCategoria(Chatbot.Categoria)">
            <summary>
            Método QuitarCategoría. Quita una categoría de la lista de categorías.
            </summary>
        </member>
        <member name="M:Chatbot.Administrador.QuitarServicio(Chatbot.Servicio)">
            <summary>
            Método QuitarServicio. Quita un servicio de la lista de servicios.
            </summary>
        </member>
        <member name="T:Chatbot.Categoria">
            <summary>
            Clase Categoría.
            </summary>
        </member>
        <member name="M:Chatbot.Categoria.#ctor(System.String)">
            <summary>
            El constructor de la clase.
            </summary>
        </member>
        <member name="T:Chatbot.CheckCalificacion">
            <summary>
            Clase CheckCalificacion. Clase que hereda de Exception. Se creó para asegurar que las calificaciones dadas al momento de calificar un contrato sean válidas.
            </summary>
        </member>
        <member name="T:Chatbot.Contrato">
            <summary>
            Clase Contrato.
            </summary>
        </member>
        <member name="M:Chatbot.Contrato.#ctor(Chatbot.Trabajador,Chatbot.Empleador,Chatbot.Servicio)">
            <summary>
            El constructor de la clase.
            </summary>
        </member>
        <member name="T:Chatbot.Empleador">
            <summary>
            Clase Empleador.
            Patrones y/o Principios utilizados para implementar la clase:
            Creator: En el método ContratarServicio se crea un objeto de la clase SolicitudContratacion. El que tiene la responsabilidad de hacer esto es Empleador porque es el que le interesa contratar a alguien.
            ISP: Los tipos que implementa la clase los utiliza. Por ejemplo: ICalificable y los métodos Calificar y GetCalificacion.
            </summary>
        </member>
        <member name="M:Chatbot.Empleador.#ctor(System.String,System.String,System.String,System.Tuple{System.Double,System.Double})">
            <summary>
            El constructor de la clase.
            </summary>
        </member>
        <member name="M:Chatbot.Empleador.GetCalificacion">
            <summary>
            Método GetCalificacion. Itera sobre la lista de contratos y si ya fueron calificados, los suma al total. Luego intenta hacer el total, teniendo en cuenta que si el empleador no tiene ninguna calificacion va a salir la excepción DivideByZeroError.
            </summary>
        </member>
        <member name="M:Chatbot.Empleador.ContratarServicio(Chatbot.Servicio)">
            <summary>
            Método ContratarServicio. Crea una solicitud de contratación y la agrega a la lista de solicitudes del trabajador dueño del servicio interesado.
            </summary>
        </member>
        <member name="M:Chatbot.Empleador.GetServicios">
            <summary>
            Método GetServicios. Retorna la lista de servicios.
            </summary>
        </member>
        <member name="M:Chatbot.Empleador.GetCategorias">
            <summary>
            Método GetCategoría. Retorna la lista de categorías.
            </summary>
        </member>
        <member name="M:Chatbot.Empleador.GetServiciosPorCategoria(Chatbot.Categoria)">
            <summary>
            Método GetServiciosPorCategoría. Llama al método FiltrarCategoría de la clase OfertaServicio, donde se ordenan los servicios según la categoría a fitrar.
            </summary>
        </member>
        <member name="M:Chatbot.Empleador.GetServiciosPorReputacion">
            <summary>
            Método GetServiciosPorReputacion. Llama al método FiltrarReputacion de la clase OfertaServicio, donde se ordenan los servicios según la reputación de los trabajadores.
            </summary>
        </member>
        <member name="M:Chatbot.Empleador.GetServiciosPorUbicacion">
            <summary>
            Método GetServiciosPorUbicacion. Llama al método FiltrarUbicacion de la clase OfertaServicio, donde se ordenan los servicios según la ubicación en orden ascendente.
            </summary>
        </member>
        <member name="M:Chatbot.Empleador.Contactar(Chatbot.Servicio)">
            <summary>
            Método Contactar. Retorna el teléfono del trabajador.
            </summary>
        </member>
        <member name="T:Chatbot.ICalificable">
            <summary>
            Interfaz ICalificable. Implementamos estas interfaces en Trabajador y Empleador para cumplir con el principio ISP. Cada método de esta interfaz es usada para todos las clases que la implementan.
            </summary>
        </member>
        <member name="T:Chatbot.IUsuario">
            <summary>
            Interfaz IUsuario. Implementamos estas interfaces en Trabajador, Empleador y Administración para cumplir con el principio ISP. Cada propiedad de esta interfaz es usada para todos las clases que la implementan.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Chatbot.OfertaServicios" -->
        <member name="M:Chatbot.OfertaServicios.FiltrarUbicacion(Chatbot.Empleador)">
            <summary>
            Método FiltrarUbicación. Hace uso de la fórmula para calcular la distancia entr dos puntos (La distancia actual y la de cada servicio en la lista de servicios). Retorna una Lista con todos los servicios ordenados de manera ascendente por ubicación.
            </summary>
        </member>
        <member name="M:Chatbot.OfertaServicios.FiltrarReputacion">
            <summary>
            Método FiltrarReputación. Ordena la Lista de servicios según la calificación total de cada trabajador y la retorna.
            </summary>
        </member>
        <member name="M:Chatbot.OfertaServicios.FiltrarCategoria(Chatbot.Categoria)">
            <summary>
            Método FiltrarCategoría. Crea una lista donde se van a agregar aquellos servicios que coincidan con la Categoría a filtrar y la retorna.
            </summary>
        </member>
        <member name="T:Chatbot.Servicio">
            <summary>
            Clase servicio.
            </summary>
        </member>
        <member name="M:Chatbot.Servicio.#ctor(System.String,Chatbot.Categoria,Chatbot.Trabajador,System.Int32)">
            <summary>
            El constructor de la clase.
            </summary>
        </member>
        <member name="T:Chatbot.Singleton`1">
            <summary>
            Clase Singleton: La implementamos para poder utilizar el patrón Singleton en las clases.
            </summary>
        </member>
        <member name="T:Chatbot.SolicitudContratacion">
            <summary>
            Clase SolicitudContratacion.
            </summary>
        </member>
        <member name="M:Chatbot.SolicitudContratacion.#ctor(Chatbot.Empleador,Chatbot.Servicio)">
            <summary>
            El constructor de la clase.
            </summary>
        </member>
        <member name="T:Chatbot.Trabajador">
            <summary>
            Clase Trabajador.
            Principios y/o Patrones utilizados para implementar la clase:
            Creator: Trabajador contiene objetos de clase Contrato, por lo que tiene la responsabilidad de confirmar la solicitud y crear el contrato
            ISP: Los tipos que implementa la clase los utiliza. Por ejemplo: ICalificable y los métodos Calificar y GetCalificacion.
            </summary>
        </member>
        <member name="F:Chatbot.Trabajador.Solicitudes">
            <summary>
            Esta lista de Solicitudes tiene un registro de aquellos empleadores que estén interesados en contratar un servicio del trabajador.
            </summary>
        </member>
        <member name="M:Chatbot.Trabajador.#ctor(System.String,System.String,System.String,System.Tuple{System.Double,System.Double})">
            <summary>
            El constructor de la clase.
            </summary>
        </member>
        <member name="M:Chatbot.Trabajador.GetCategorias">
            <summary>
            Método GetCategorías. Retorna la única lista de categorías existente.
            </summary>
        </member>
        <member name="M:Chatbot.Trabajador.GetCalificacion">
            <summary>
            Método GetCalificación. Itera sobre todos los contratos del trabajador y si estos todavía no fueron calificados no los tiene en cuenta. En el caso contrario, los suma al total de calificaciones y aumenta el contador de calificaciones. Luego retorna el promedio de calificaciones.
            </summary>
        </member>
        <member name="M:Chatbot.Trabajador.CrearServicio(System.String,Chatbot.Categoria,System.Int32)">
            <summary>
            Método CrearServicio. Crea una instancia de Servicio con los parámetros dados y lo agrega a la única lista de servicios.
            </summary>
        </member>
        <member name="M:Chatbot.Trabajador.QuitarSuServicio(Chatbot.Servicio)">
            <summary>
            Método QuitarServicio. Primero se asegura que el servicio a remover sea de propiedad del trabajador que llama al método. Si esto se cumple, lo elimina de la única lista de servicios.
            </summary>
        </member>
        <member name="M:Chatbot.Trabajador.AceptarSolicitud(Chatbot.SolicitudContratacion,System.Boolean)">
            <summary>
            Método AceptarSolicitud. Entra como parámetro un objeto de la clase SolicitudContratacion. Este contiene el servicio interesado y el empleador interesado. Si el trabajador decide aceptar la solicitud, se crea un Contrato con los datos de la solicitud y el trabajador, y luego lo añade a la lista de contratos del empleador interesado. Por último, la solicitud se elimina de la lista de solicitudes pendientes del trabajador.
            </summary>
        </member>
        <member name="T:Ucu.Poo.TelegramBot.AddressFinder">
            <summary>
            Un buscador de direcciones concreto que usa una API de localización.
            </summary>
        </member>
        <member name="M:Ucu.Poo.TelegramBot.AddressFinder.#ctor(Ucu.Poo.Locations.Client.LocationApiClient)">
            <summary>
            Inicializa una nueva instancia de AddressFinder.
            </summary>
            <param name="client">El cliente de la API de localización.</param>
        </member>
        <member name="M:Ucu.Poo.TelegramBot.AddressFinder.GetLocation(System.String)">
            <summary>
            Determina si existe una dirección.
            </summary>
            <param name="address">La dirección a buscar.</param>
            <returns>Una instancia de AddressResult con el resultado de la búsqueda, que incluye si la dirección se
            encontró o no, y si se encontró, la latitud y la longitud de la dirección.</returns>
        </member>
        <member name="T:Ucu.Poo.TelegramBot.AddressResult">
            <summary>
            Una implementación concreta del resutlado de buscar una dirección. Además de las propiedades definidas en
            IAddressResult esta clase agrega una propiedad Location para acceder a las coordenadas de la dirección buscada.
            </summary>
        </member>
        <member name="T:Ucu.Poo.TelegramBot.AddressHandler">
            <summary>
            Un "handler" del patrón Chain of Responsibility que implementa el comando "dirección".
            </summary>
        </member>
        <member name="P:Ucu.Poo.TelegramBot.AddressHandler.State">
            <summary>
            El estado del comando.
            </summary>
        </member>
        <member name="P:Ucu.Poo.TelegramBot.AddressHandler.Data">
            <summary>
            Los datos que va obteniendo el comando en los diferentes estados.
            </summary>
        </member>
        <member name="M:Ucu.Poo.TelegramBot.AddressHandler.#ctor(Ucu.Poo.TelegramBot.IAddressFinder,Ucu.Poo.TelegramBot.BaseHandler)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:Ucu.Poo.TelegramBot.AddressHandler"/>.
            </summary>
            <param name="next">Un buscador de direcciones.</param>
            <param name="next">El próximo "handler".</param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Ucu.Poo.TelegramBot.AddressHandler.CanHandle(Telegram.Bot.Types.Message)" -->
        <member name="M:Ucu.Poo.TelegramBot.AddressHandler.InternalHandle(Telegram.Bot.Types.Message,System.String@)">
            <summary>
            Procesa todos los mensajes y retorna true siempre.
            </summary>
            <param name="message">El mensaje a procesar.</param>
            <param name="response">La respuesta al mensaje procesado indicando que el mensaje no pudo se procesado.</param>
            <returns>true si el mensaje fue procesado; false en caso contrario.</returns>
        </member>
        <member name="M:Ucu.Poo.TelegramBot.AddressHandler.InternalCancel">
            <summary>
            Retorna este "handler" al estado inicial.
            </summary>
        </member>
        <member name="T:Ucu.Poo.TelegramBot.AddressHandler.AddressState">
            <summary>
            Indica los diferentes estados que puede tener el comando AddressHandler.
            - Start: El estado inicial del comando. En este estado el comando pide una dirección de origen y pasa al
            siguiente estado.
            - AddressPrompt: Luego de pedir la dirección. En este estado el comando obtiene las coordenadas de la
            dirección y vuelve al estado Start.
            </summary>
        </member>
        <member name="T:Ucu.Poo.TelegramBot.AddressHandler.AddressData">
            <summary>
            Representa los datos que va obteniendo el comando AddressHandler en los diferentes estados.
            </summary>
        </member>
        <member name="P:Ucu.Poo.TelegramBot.AddressHandler.AddressData.Address">
            <summary>
            La dirección que se ingresó en el estado AddressState.AddressPrompt.
            </summary>
        </member>
        <member name="P:Ucu.Poo.TelegramBot.AddressHandler.AddressData.Result">
            <summary>
            El resultado de la búsqueda de la dirección ingresada.
            </summary>
        </member>
        <member name="T:Ucu.Poo.TelegramBot.AgregarCatHandler">
            <summary>
            Un "handler" del patrón Chain of Responsibility que implementa el comando "dirección".
            </summary>
        </member>
        <member name="P:Ucu.Poo.TelegramBot.AgregarCatHandler.State">
            <summary>
            El estado del comando.
            </summary>
        </member>
        <member name="M:Ucu.Poo.TelegramBot.AgregarCatHandler.#ctor(Ucu.Poo.TelegramBot.BaseHandler)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:Ucu.Poo.TelegramBot.AddressHandler"/>.
            </summary>
            <param name="next">Un buscador de direcciones.</param>
            <param name="next">El próximo "handler".</param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Ucu.Poo.TelegramBot.AgregarCatHandler.CanHandle(Telegram.Bot.Types.Message)" -->
        <member name="M:Ucu.Poo.TelegramBot.AgregarCatHandler.InternalHandle(Telegram.Bot.Types.Message,System.String@)">
            <summary>
            Procesa todos los mensajes y retorna true siempre.
            </summary>
            <param name="message">El mensaje a procesar.</param>
            <param name="response">La respuesta al mensaje procesado indicando que el mensaje no pudo se procesado.</param>
            <returns>true si el mensaje fue procesado; false en caso contrario.</returns>
        </member>
        <member name="M:Ucu.Poo.TelegramBot.AgregarCatHandler.InternalCancel">
            <summary>
            Retorna este "handler" al estado inicial.
            </summary>
        </member>
        <member name="T:Ucu.Poo.TelegramBot.AgregarCatHandler.CatState">
            <summary>
            Indica los diferentes estados que puede tener el comando AddressHandler.
            - Start: El estado inicial del comando. En este estado el comando pide el nombre de la categoria y pasa al
            siguiente estado.
            - CatPrompt: Luego de pedir el nombre. En este estado el comando crea la categoría y vuelve al estado Start.
            </summary>
        </member>
        <member name="T:Ucu.Poo.TelegramBot.AugusHandler">
            <summary>
            Un "handler" del patrón Chain of Responsibility que implementa el comando "foto".
            </summary>
        </member>
        <member name="M:Ucu.Poo.TelegramBot.AugusHandler.#ctor(Telegram.Bot.TelegramBotClient,Ucu.Poo.TelegramBot.BaseHandler)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="!:PhotoHandler"/>. Esta clase procesa el mensaje "foto".
            </summary>
            <param name="next">El próximo "handler".</param>
            <param name="bot">El bot para enviar la foto.</param>
        </member>
        <member name="M:Ucu.Poo.TelegramBot.AugusHandler.InternalHandle(Telegram.Bot.Types.Message,System.String@)">
            <summary>
            Procesa el mensaje "foto" y retorna true; retorna false en caso contrario.
            </summary>
            <param name="message">El mensaje a procesar.</param>
            <param name="response">La respuesta al mensaje procesado.</param>
            <returns>true si el mensaje fue procesado; false en caso contrario.</returns>
        </member>
        <member name="M:Ucu.Poo.TelegramBot.AugusHandler.SendProfileImage(Telegram.Bot.Types.Message)">
            <summary>
            Envía una imagen como respuesta al mensaje recibido. Como ejemplo enviamos siempre la misma foto.
            </summary>
        </member>
        <member name="T:Ucu.Poo.TelegramBot.BascouHandler">
            <summary>
            Un "handler" del patrón Chain of Responsibility que implementa el comando "chau".
            </summary>
        </member>
        <member name="M:Ucu.Poo.TelegramBot.BascouHandler.#ctor(Ucu.Poo.TelegramBot.BaseHandler)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="!:GoodByeHandler"/>. Esta clase procesa el mensaje "chau"
            y el mensaje "adiós" -un ejemplo de cómo un "handler" puede procesar comandos con sinónimos.
            </summary>
            <param name="next">El próximo "handler".</param>
        </member>
        <member name="M:Ucu.Poo.TelegramBot.BascouHandler.InternalHandle(Telegram.Bot.Types.Message,System.String@)">
            <summary>
            Procesa el mensaje "chau" y retorna true; retorna false en caso contrario.
            </summary>
            <param name="message">El mensaje a procesar.</param>
            <param name="response">La respuesta al mensaje procesado.</param>
            <returns>true si el mensaje fue procesado; false en caso contrario.</returns>
        </member>
        <member name="T:Ucu.Poo.TelegramBot.BaseHandler">
            <summary>
            Clase base para implementar el patrón Chain of Responsibility. En ese patrón se pasa un mensaje a través de una
            cadena de "handlers" que pueden procesar o no el mensaje. Cada "handler" decide si procesa el mensaje, o si se lo
            pasa al siguiente. Esta clase base implmementa la responsabilidad de recibir el mensaje y pasarlo al siguiente
            "handler" en caso que el mensaje no sea procesado. La responsabilidad de decidir si el mensaje se procesa o no, y
            de procesarlo, se delega a las clases sucesoras de esta clase base.
            </summary>
        </member>
        <member name="P:Ucu.Poo.TelegramBot.BaseHandler.Next">
            <summary>
            Obtiene el próximo "handler".
            </summary>
            <value>El "handler" que será invocado si este "handler" no procesa el mensaje.</value>
        </member>
        <member name="P:Ucu.Poo.TelegramBot.BaseHandler.Keywords">
            <summary>
            Obtiene o asigna el conjunto de palabras clave que este "handler" puede procesar.
            </summary>
            <value>Un array de palabras clave.</value>
        </member>
        <member name="M:Ucu.Poo.TelegramBot.BaseHandler.#ctor(Ucu.Poo.TelegramBot.IHandler)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:Ucu.Poo.TelegramBot.BaseHandler"/>.
            </summary>
            <param name="next">El próximo "handler".</param>
        </member>
        <member name="M:Ucu.Poo.TelegramBot.BaseHandler.#ctor(System.String[],Ucu.Poo.TelegramBot.BaseHandler)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:Ucu.Poo.TelegramBot.BaseHandler"/> con una lista de comandos.
            </summary>
            <param name="keywords">La lista de comandos.</param>
            <param name="next">El próximo "handler".</param>
        </member>
        <member name="M:Ucu.Poo.TelegramBot.BaseHandler.InternalHandle(Telegram.Bot.Types.Message,System.String@)">
            <summary>
            Este método debe ser sobreescrito por las clases sucesores. La clase sucesora procesa el mensaje y asigna
            la respuesta al mensaje.
            </summary>
            <param name="message">El mensaje a procesar.</param>
            <param name="response">La respuesta al mensaje procesado.</param>
        </member>
        <member name="M:Ucu.Poo.TelegramBot.BaseHandler.InternalCancel">
            <summary>
            Este método puede ser sobreescrito en las clases sucesores que procesan varios mensajes cambiando de estado
            entre mensajes deben sobreescribir este método para volver al estado inicial. En la clase base no hace nada.
            </summary>
        </member>
        <member name="M:Ucu.Poo.TelegramBot.BaseHandler.CanHandle(Telegram.Bot.Types.Message)">
            <summary>
            Determina si este "handler" puede procesar el mensaje. En la clase base se utiliza el array
            <see cref="P:Ucu.Poo.TelegramBot.BaseHandler.Keywords"/> para buscar el texto en el mensaje ignorando mayúsculas y minúsculas. Las
            clases sucesores pueden sobreescribir este método para proveer otro mecanismo para determina si procesan o no
            un mensaje.
            </summary>
            <param name="message">El mensaje a procesar.</param>
            <returns>true si el mensaje puede ser pocesado; false en caso contrario.</returns>
        </member>
        <member name="M:Ucu.Poo.TelegramBot.BaseHandler.Handle(Telegram.Bot.Types.Message,System.String@)">
            <summary>
            Procesa el mensaje o lo pasa al siguiente "handler" si existe.
            </summary>
            <param name="message">El mensaje a procesar.</param>
            <param name="response">La respuesta al mensaje procesado.</param>
            <returns>El "handler" que procesó el mensaje si el mensaje fue procesado; null en caso contrario.</returns>
        </member>
        <member name="M:Ucu.Poo.TelegramBot.BaseHandler.Cancel">
            <summary>
            Retorna este "handler" al estado inicial. En los "handler" sin estado no hace nada. Los "handlers" que
            procesan varios mensajes cambiando de estado entre mensajes deben sobreescribir este método para volver al
            estado inicial.
            </summary>
        </member>
        <member name="T:Ucu.Poo.TelegramBot.DiaHandler">
            <summary>
            Un "handler" del patrón Chain of Responsibility que implementa el comando "hola".
            </summary>
        </member>
        <member name="M:Ucu.Poo.TelegramBot.DiaHandler.#ctor(Ucu.Poo.TelegramBot.BaseHandler)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:Ucu.Poo.TelegramBot.HelloHandler"/>. Esta clase procesa el mensaje "hola".
            </summary>
            <param name="next">El próximo "handler".</param>
        </member>
        <member name="M:Ucu.Poo.TelegramBot.DiaHandler.InternalHandle(Telegram.Bot.Types.Message,System.String@)">
            <summary>
            Procesa el mensaje "hola" y retorna true; retorna false en caso contrario.
            </summary>
            <param name="message">El mensaje a procesar.</param>
            <param name="response">La respuesta al mensaje procesado.</param>
            <returns>true si el mensaje fue procesado; false en caso contrario.</returns>
        </member>
        <member name="T:Ucu.Poo.TelegramBot.DistanceCalculator">
            <summary>
            Un calculador de distancias concreto que utiliza una API de localización para calcular la distancia entre dos
            direcciones.
            </summary>
        </member>
        <member name="T:Ucu.Poo.TelegramBot.DistanceResult">
            <summary>
            Una implementación concreta del resutlado de calcular distancias. Además de las propiedades definidas en
            IDistanceResult esta clase agrega propiedades para acceder a las coordenadas de las direcciones buscadas.
            </summary>
        </member>
        <member name="M:Ucu.Poo.TelegramBot.DistanceResult.#ctor(Ucu.Poo.Locations.Client.Location,Ucu.Poo.Locations.Client.Location,System.Double,System.Double)">
            <summary>
            Inicializa una nueva instancia de DistanceResult a partir de dos coordenadas, la distancia y el tiempo
            entre ellas.
            </summary>
            <param name="from">Las coordenadas de origen.</param>
            <param name="to">Las coordenadas de destino.</param>
            <param name="distance">La distancia entre las coordenadas.</param>
            <param name="time">El tiempo que se demora en llegar del origen al destino.</param>
        </member>
        <member name="T:Ucu.Poo.TelegramBot.DistanceHandler">
            <summary>
            Un "handler" del patrón Chain of Responsibility que implementa el comando "distancia".
            </summary>
        </member>
        <member name="P:Ucu.Poo.TelegramBot.DistanceHandler.State">
            <summary>
            El estado del comando.
            </summary>
        </member>
        <member name="P:Ucu.Poo.TelegramBot.DistanceHandler.Data">
            <summary>
            Los datos que va obteniendo el comando en los diferentes estados.
            </summary>
        </member>
        <member name="M:Ucu.Poo.TelegramBot.DistanceHandler.#ctor(Ucu.Poo.TelegramBot.IDistanceCalculator,Ucu.Poo.TelegramBot.DistanceHandler)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:Ucu.Poo.TelegramBot.DistanceHandler"/>.
            </summary>
            <param name="calculator">Un calculador de distancias.</param>
            <param name="next">El próximo "handler".</param>
        </member>
        <member name="M:Ucu.Poo.TelegramBot.DistanceHandler.CanHandle(Telegram.Bot.Types.Message)">
            <summary>
            Determina si este "handler" puede procesar el mensaje. En el primer mensaje cuando
            <see cref="P:Ucu.Poo.TelegramBot.DistanceHandler.State"/> es <see cref="F:Ucu.Poo.TelegramBot.DistanceHandler.DistanceState.Start"/> usa
            <see cref="P:Ucu.Poo.TelegramBot.BaseHandler.Keywords"/> para buscar el texto en el mensaje ignorando mayúsculas y minúsculas. En
            caso contrario eso implica que los sucesivos mensajes son parámetros del comando y se procesan siempre.
            </summary>
            <param name="message">El mensaje a procesar.</param>
            <returns>true si el mensaje puede ser pocesado; false en caso contrario.</returns>
        </member>
        <member name="M:Ucu.Poo.TelegramBot.DistanceHandler.InternalHandle(Telegram.Bot.Types.Message,System.String@)">
            <summary>
            Procesa todos los mensajes y retorna true siempre.
            </summary>
            <param name="message">El mensaje a procesar.</param>
            <param name="response">La respuesta al mensaje procesado indicando que el mensaje no pudo se procesado.</param>
            <returns>true si el mensaje fue procesado; false en caso contrario.</returns>
        </member>
        <member name="M:Ucu.Poo.TelegramBot.DistanceHandler.InternalCancel">
            <summary>
            Retorna este "handler" al estado inicial.
            </summary>
        </member>
        <member name="T:Ucu.Poo.TelegramBot.DistanceHandler.DistanceState">
            <summary>
            Indica los diferentes estados que puede tener el comando DistanceHandler.
            - Start: El estado inicial del comando. En este estado el comando pide la dirección de origen y pasa al
            siguiente estado.
            - FromAddressPrompt: Luego de pedir la dirección de origen. En este estado el comando pide la dirección de
            destino y pasa al siguiente estado.
            - ToAddressPrompt: Luego de pedir la dirección de destino. En este estado el comando calcula la distancia
            y vuelve al estado Start.
            </summary>
        </member>
        <member name="T:Ucu.Poo.TelegramBot.DistanceHandler.DistanceData">
            <summary>
            Representa los datos que va obteniendo el comando DistanceHandler en los diferentes estados.
            </summary>
        </member>
        <member name="P:Ucu.Poo.TelegramBot.DistanceHandler.DistanceData.FromAddress">
            <summary>
            La dirección que se ingresó en el estado DistanceState.FromAddressPrompt.
            </summary>
        </member>
        <member name="P:Ucu.Poo.TelegramBot.DistanceHandler.DistanceData.ToAddress">
            <summary>
            La dirección que se ingresó en el estado DistanceState.ToAddressPrompt.
            </summary>
        </member>
        <member name="P:Ucu.Poo.TelegramBot.DistanceHandler.DistanceData.Result">
            <summary>
            El resultado del cálculo de la distancia entre las direcciones ingresadas.
            </summary>
        </member>
        <member name="T:Ucu.Poo.TelegramBot.DuarteHandler">
            <summary>
            Un "handler" del patrón Chain of Responsibility que implementa el comando "chau".
            </summary>
        </member>
        <member name="M:Ucu.Poo.TelegramBot.DuarteHandler.#ctor(Ucu.Poo.TelegramBot.BaseHandler)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="!:GoodByeHandler"/>. Esta clase procesa el mensaje "chau"
            y el mensaje "adiós" -un ejemplo de cómo un "handler" puede procesar comandos con sinónimos.
            </summary>
            <param name="next">El próximo "handler".</param>
        </member>
        <member name="M:Ucu.Poo.TelegramBot.DuarteHandler.InternalHandle(Telegram.Bot.Types.Message,System.String@)">
            <summary>
            Procesa el mensaje "chau" y retorna true; retorna false en caso contrario.
            </summary>
            <param name="message">El mensaje a procesar.</param>
            <param name="response">La respuesta al mensaje procesado.</param>
            <returns>true si el mensaje fue procesado; false en caso contrario.</returns>
        </member>
        <member name="T:Ucu.Poo.TelegramBot.FlouHandler">
            <summary>
            Un "handler" del patrón Chain of Responsibility que implementa el comando "chau".
            </summary>
        </member>
        <member name="M:Ucu.Poo.TelegramBot.FlouHandler.#ctor(Ucu.Poo.TelegramBot.BaseHandler)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="!:GoodByeHandler"/>. Esta clase procesa el mensaje "chau"
            y el mensaje "adiós" -un ejemplo de cómo un "handler" puede procesar comandos con sinónimos.
            </summary>
            <param name="next">El próximo "handler".</param>
        </member>
        <member name="M:Ucu.Poo.TelegramBot.FlouHandler.InternalHandle(Telegram.Bot.Types.Message,System.String@)">
            <summary>
            Procesa el mensaje "chau" y retorna true; retorna false en caso contrario.
            </summary>
            <param name="message">El mensaje a procesar.</param>
            <param name="response">La respuesta al mensaje procesado.</param>
            <returns>true si el mensaje fue procesado; false en caso contrario.</returns>
        </member>
        <member name="T:Ucu.Poo.TelegramBot.GermiHandler">
            <summary>
            Un "handler" del patrón Chain of Responsibility que implementa el comando "chau".
            </summary>
        </member>
        <member name="M:Ucu.Poo.TelegramBot.GermiHandler.#ctor(Ucu.Poo.TelegramBot.BaseHandler)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="!:GoodByeHandler"/>. Esta clase procesa el mensaje "chau"
            y el mensaje "adiós" -un ejemplo de cómo un "handler" puede procesar comandos con sinónimos.
            </summary>
            <param name="next">El próximo "handler".</param>
        </member>
        <member name="M:Ucu.Poo.TelegramBot.GermiHandler.InternalHandle(Telegram.Bot.Types.Message,System.String@)">
            <summary>
            Procesa el mensaje "chau" y retorna true; retorna false en caso contrario.
            </summary>
            <param name="message">El mensaje a procesar.</param>
            <param name="response">La respuesta al mensaje procesado.</param>
            <returns>true si el mensaje fue procesado; false en caso contrario.</returns>
        </member>
        <member name="T:Ucu.Poo.TelegramBot.GeroHandler">
            <summary>
            Un "handler" del patrón Chain of Responsibility que implementa el comando "chau".
            </summary>
        </member>
        <member name="M:Ucu.Poo.TelegramBot.GeroHandler.#ctor(Ucu.Poo.TelegramBot.BaseHandler)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="!:GoodByeHandler"/>. Esta clase procesa el mensaje "chau"
            y el mensaje "adiós" -un ejemplo de cómo un "handler" puede procesar comandos con sinónimos.
            </summary>
            <param name="next">El próximo "handler".</param>
        </member>
        <member name="M:Ucu.Poo.TelegramBot.GeroHandler.InternalHandle(Telegram.Bot.Types.Message,System.String@)">
            <summary>
            Procesa el mensaje "chau" y retorna true; retorna false en caso contrario.
            </summary>
            <param name="message">El mensaje a procesar.</param>
            <param name="response">La respuesta al mensaje procesado.</param>
            <returns>true si el mensaje fue procesado; false en caso contrario.</returns>
        </member>
        <member name="T:Ucu.Poo.TelegramBot.GestiHandler">
            <summary>
            Un "handler" del patrón Chain of Responsibility que implementa el comando "chau".
            </summary>
        </member>
        <member name="M:Ucu.Poo.TelegramBot.GestiHandler.#ctor(Ucu.Poo.TelegramBot.BaseHandler)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="!:GoodByeHandler"/>. Esta clase procesa el mensaje "chau"
            y el mensaje "adiós" -un ejemplo de cómo un "handler" puede procesar comandos con sinónimos.
            </summary>
            <param name="next">El próximo "handler".</param>
        </member>
        <member name="M:Ucu.Poo.TelegramBot.GestiHandler.InternalHandle(Telegram.Bot.Types.Message,System.String@)">
            <summary>
            Procesa el mensaje "chau" y retorna true; retorna false en caso contrario.
            </summary>
            <param name="message">El mensaje a procesar.</param>
            <param name="response">La respuesta al mensaje procesado.</param>
            <returns>true si el mensaje fue procesado; false en caso contrario.</returns>
        </member>
        <member name="T:Ucu.Poo.TelegramBot.HelloHandler">
            <summary>
            Un "handler" del patrón Chain of Responsibility que implementa el comando "hola".
            </summary>
        </member>
        <member name="P:Ucu.Poo.TelegramBot.HelloHandler.State">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:Ucu.Poo.TelegramBot.HelloHandler"/>. Esta clase procesa el mensaje "hola".
            </summary>
            <param name="next">El próximo "handler".</param>
        </member>
        <member name="M:Ucu.Poo.TelegramBot.HelloHandler.InternalHandle(Telegram.Bot.Types.Message,System.String@)">
            <summary>
            Procesa el mensaje "hola" y retorna true; retorna false en caso contrario.
            </summary>
            <param name="message">El mensaje a procesar.</param>
            <param name="response">La respuesta al mensaje procesado.</param>
            <returns>true si el mensaje fue procesado; false en caso contrario.</returns>
        </member>
        <member name="T:Ucu.Poo.TelegramBot.HelpHandler">
            <summary>
            Un "handler" del patrón Chain of Responsibility que implementa el comando "ayuda".
            </summary>
        </member>
        <member name="M:Ucu.Poo.TelegramBot.HelpHandler.#ctor(Ucu.Poo.TelegramBot.BaseHandler)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:Ucu.Poo.TelegramBot.HelloHandler"/>. Esta clase procesa el mensaje "ayuda".
            </summary>
            <param name="next">El próximo "handler".</param>
        </member>
        <member name="M:Ucu.Poo.TelegramBot.HelpHandler.InternalHandle(Telegram.Bot.Types.Message,System.String@)">
            <summary>
            Procesa el mensaje "ayuda" y retorna true; retorna false en caso contrario.
            </summary>
            <param name="message">El mensaje a procesar.</param>
            <param name="response">La respuesta al mensaje procesado.</param>
            <returns>true si el mensaje fue procesado; false en caso contrario.</returns>
        </member>
        <member name="T:Ucu.Poo.TelegramBot.IAddressFinder">
            <summary>
            Una interfaz define una abstracción para un buscador de direcciones genérico.
            </summary>
            <remarks>
            Esta interfaz fue creada siguiendo el principio de inversión de dependencias para evitar que los comandos
            concretos dependan de buscadores de direcciones concretos; en su lugar los comandos concretos dependen de esta
            abstracción.
            Entre otras cosas est permite cambiar el buscador de direcciones en tiempo de ejecución, para utilizar uno en
            los casos de prueba que retorna resultados conocidos para direcciones conocidas, y otro en la versión final para
            buscar usando una API de localizaciones.
            </remarks>
        </member>
        <member name="M:Ucu.Poo.TelegramBot.IAddressFinder.GetLocation(System.String)">
            <summary>
            Determina si existe una dirección.
            </summary>
            <param name="address">La dirección a buscar.</param>
            <returns>Un objeto de una clase que implemente la interfaz IAddressResult con el resultado de la búsqueda, que
            incluye si la dirección se encontró o no, y si se encontró, la latitud y la longitud de la dirección.</returns>
        </member>
        <member name="P:Ucu.Poo.TelegramBot.IAddressResult.Found">
            <summary>
            Indica si se encontró o no la dirección. En ese caso son válidos los demás valores. En caso contrario los
            demás valores son indeterminados.
            </summary>
            <value>true si se encontró la dirección; false en caso contrario.</value>
        </member>
        <member name="P:Ucu.Poo.TelegramBot.IAddressResult.Latitude">
            <summary>
            La latitud de la dirección.
            </summary>
            <value>El valor de la latitud en formato decimal.</value>
        </member>
        <member name="P:Ucu.Poo.TelegramBot.IAddressResult.Longitude">
            <summary>
            La longitud de la dirección.
            </summary>
            <value>El valor de la longitud en formato decimal.</value>
        </member>
        <member name="T:Ucu.Poo.TelegramBot.IDistanceCalculator">
            <summary>
            Una interfaz que define una abstracción para un calculador de distancias genérico.
            </summary>
            <remarks>
            Esta interfaz fue creada siguiendo el principio de inversión de dependencias para evitar que los comandos
            concretos dependan de calculadores de distancias concretos; en su lugar los comandos concretos dependen de esta
            abstracción.
            Entre otras cosas est permite cambiar el calculador de distancias en tiempo de ejecución, para utilizar uno en
            los casos de prueba que retorna resultados conocidos para direcciones conocidas, y otro en la versión final para
            buscar usando una API de localizaciones.
            </remarks>
        </member>
        <member name="M:Ucu.Poo.TelegramBot.IDistanceCalculator.CalculateDistance(System.String,System.String)">
            <summary>
            Determina si existe una dirección.
            </summary>
            <param name="address">La dirección a buscar.</param>
            <returns>true si la dirección existe; false en caso contrario.</returns>
        </member>
        <member name="T:Ucu.Poo.TelegramBot.IDistanceResult">
            <summary>
            Una interfaz que define una abstracción para el resultado de calcular distancias.
            </summary>
        </member>
        <member name="P:Ucu.Poo.TelegramBot.IDistanceResult.FromExists">
            <summary>
            Obtiene un valor que indica si la dirección de origen para el cálculo de distancias existe; sólo se puede
            calcular la distancia entre direcciones que existen.
            </summary>
        </member>
        <member name="P:Ucu.Poo.TelegramBot.IDistanceResult.ToExists">
            <summary>
            Obtiene un valor que indica si la dirección de destino para el cálculo de distancias existe; sólo se puede
            calcular la distancia entre direcciones que existen.
            </summary>
        </member>
        <member name="P:Ucu.Poo.TelegramBot.IDistanceResult.Distance">
            <summary>
            La distancia calculada.
            </summary>
        </member>
        <member name="P:Ucu.Poo.TelegramBot.IDistanceResult.Time">
            <summary>
            El tiempo en llegar del origen al destino.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Ucu.Poo.TelegramBot.IHandler" -->
        <member name="P:Ucu.Poo.TelegramBot.IHandler.Next">
            <summary>
            Obtiene el próximo "handler".
            </summary>
            <value>El "handler" que será invocado si este "handler" no procesa el mensaje.</value>
        </member>
        <member name="M:Ucu.Poo.TelegramBot.IHandler.Handle(Telegram.Bot.Types.Message,System.String@)">
            <summary>
            Procesa el mensaje o la pasa al siguiente "handler" si existe.
            </summary>
            <param name="message">El mensaje a procesar.</param>
            <param name="response">La respuesta al mensaje procesado.</param>
            <returns>El "handler" que procesó el mensaje si el mensaje fue procesado; null en caso contrario.</returns>
        </member>
        <member name="M:Ucu.Poo.TelegramBot.IHandler.Cancel">
            <summary>
            Retorna este "handler" al estado inicial y cancela el próximo "handler" si existe. Es utilizado para que los
            "handlers" que procesan varios mensajes cambiando de estado entre mensajes puedan volver al estado inicial en
            caso de error por ejemplo.
            </summary>
        </member>
        <member name="T:Ucu.Poo.TelegramBot.LeitoHandler">
            <summary>
            Un "handler" del patrón Chain of Responsibility que implementa el comando "chau".
            </summary>
        </member>
        <member name="M:Ucu.Poo.TelegramBot.LeitoHandler.#ctor(Ucu.Poo.TelegramBot.BaseHandler)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="!:GoodByeHandler"/>. Esta clase procesa el mensaje "chau"
            y el mensaje "adiós" -un ejemplo de cómo un "handler" puede procesar comandos con sinónimos.
            </summary>
            <param name="next">El próximo "handler".</param>
        </member>
        <member name="M:Ucu.Poo.TelegramBot.LeitoHandler.InternalHandle(Telegram.Bot.Types.Message,System.String@)">
            <summary>
            Procesa el mensaje "chau" y retorna true; retorna false en caso contrario.
            </summary>
            <param name="message">El mensaje a procesar.</param>
            <param name="response">La respuesta al mensaje procesado.</param>
            <returns>true si el mensaje fue procesado; false en caso contrario.</returns>
        </member>
        <member name="T:Ucu.Poo.TelegramBot.NahuelHandler">
            <summary>
            Un "handler" del patrón Chain of Responsibility que implementa el comando "chau".
            </summary>
        </member>
        <member name="M:Ucu.Poo.TelegramBot.NahuelHandler.#ctor(Ucu.Poo.TelegramBot.BaseHandler)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="!:GoodByeHandler"/>. Esta clase procesa el mensaje "chau"
            y el mensaje "adiós" -un ejemplo de cómo un "handler" puede procesar comandos con sinónimos.
            </summary>
            <param name="next">El próximo "handler".</param>
        </member>
        <member name="M:Ucu.Poo.TelegramBot.NahuelHandler.InternalHandle(Telegram.Bot.Types.Message,System.String@)">
            <summary>
            Procesa el mensaje "chau" y retorna true; retorna false en caso contrario.
            </summary>
            <param name="message">El mensaje a procesar.</param>
            <param name="response">La respuesta al mensaje procesado.</param>
            <returns>true si el mensaje fue procesado; false en caso contrario.</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Ucu.Poo.TelegramBot.OpinionHandler.OpiState" -->
        <member name="T:Ucu.Poo.TelegramBot.QuitarCatHandler">
            <summary>
            Un "handler" del patrón Chain of Responsibility que implementa el comando "dirección".
            </summary>
        </member>
        <member name="P:Ucu.Poo.TelegramBot.QuitarCatHandler.State">
            <summary>
            El estado del comando.
            </summary>
        </member>
        <member name="M:Ucu.Poo.TelegramBot.QuitarCatHandler.#ctor(Ucu.Poo.TelegramBot.BaseHandler)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:Ucu.Poo.TelegramBot.AddressHandler"/>.
            </summary>
            <param name="next">Un buscador de direcciones.</param>
            <param name="next">El próximo "handler".</param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Ucu.Poo.TelegramBot.QuitarCatHandler.CanHandle(Telegram.Bot.Types.Message)" -->
        <member name="M:Ucu.Poo.TelegramBot.QuitarCatHandler.InternalHandle(Telegram.Bot.Types.Message,System.String@)">
            <summary>
            Procesa todos los mensajes y retorna true siempre.
            </summary>
            <param name="message">El mensaje a procesar.</param>
            <param name="response">La respuesta al mensaje procesado indicando que el mensaje no pudo se procesado.</param>
            <returns>true si el mensaje fue procesado; false en caso contrario.</returns>
        </member>
        <member name="M:Ucu.Poo.TelegramBot.QuitarCatHandler.InternalCancel">
            <summary>
            Retorna este "handler" al estado inicial.
            </summary>
        </member>
        <member name="T:Ucu.Poo.TelegramBot.QuitarCatHandler.CatState">
            <summary>
            Indica los diferentes estados que puede tener el comando AddressHandler.
            - Start: El estado inicial del comando. En este estado el comando pide el nombre de la categoria y pasa al
            siguiente estado.
            - CatPrompt: Luego de pedir el nombre. En este estado el comando crea la categoría y vuelve al estado Start.
            </summary>
        </member>
        <member name="T:Ucu.Poo.TelegramBot.RegistroHandler">
            <summary>
            Un "handler" del patrón Chain of Responsibility que implementa el comando "registro".
            </summary>
        </member>
        <member name="M:Ucu.Poo.TelegramBot.RegistroHandler.InternalCancel">
            <summary>
            Retorna este "handler" al estado inicial.
            </summary>
        </member>
        <member name="T:Ucu.Poo.TelegramBot.RegistroHandler.RegState">
            <summary>
            Indica los diferentes estados que puede tener el comando RegistroHandler.
            - Start: El estado inicial del comando. En este estado el comando pide el nombre de la categoria y pasa al
            siguiente estado.
            - RegPrompt: Luego de pedir el nombre. En este estado el comando crea la categoría y vuelve al estado Start.
            </summary>
        </member>
        <member name="T:Ucu.Poo.TelegramBot.SantiHandler">
            <summary>
            Un "handler" del patrón Chain of Responsibility que implementa el comando "dirección".
            </summary>
        </member>
        <member name="M:Ucu.Poo.TelegramBot.SantiHandler.#ctor(Telegram.Bot.TelegramBotClient,Ucu.Poo.TelegramBot.BaseHandler)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:Ucu.Poo.TelegramBot.AddressHandler"/>.
            </summary>
            <param name="next">Un buscador de direcciones.</param>
            <param name="next">El próximo "handler".</param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Ucu.Poo.TelegramBot.SantiHandler.InternalHandle(Telegram.Bot.Types.Message,System.String@)" -->
        <member name="M:Ucu.Poo.TelegramBot.SantiHandler.SendProfileImageSanti(Telegram.Bot.Types.Message)">
            <summary>
            Retorna este "handler" al estado inicial.
            </summary>
        </member>
        <member name="T:Ucu.Poo.TelegramBot.VerCategoriaHandler">
            <summary>
            Un "handler" del patrón Chain of Responsibility que implementa el comando "chau".
            </summary>
        </member>
        <member name="M:Ucu.Poo.TelegramBot.VerCategoriaHandler.#ctor(Ucu.Poo.TelegramBot.BaseHandler)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="!:GoodByeHandler"/>. Esta clase procesa el mensaje "chau"
            y el mensaje "adiós" -un ejemplo de cómo un "handler" puede procesar comandos con sinónimos.
            </summary>
            <param name="next">El próximo "handler".</param>
        </member>
        <member name="M:Ucu.Poo.TelegramBot.VerCategoriaHandler.InternalHandle(Telegram.Bot.Types.Message,System.String@)">
            <summary>
            Procesa el mensaje "chau" y retorna true; retorna false en caso contrario.
            </summary>
            <param name="message">El mensaje a procesar.</param>
            <param name="response">La respuesta al mensaje procesado.</param>
            <returns>true si el mensaje fue procesado; false en caso contrario.</returns>
        </member>
    </members>
</doc>
